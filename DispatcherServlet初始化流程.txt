1. DispatcherServlet初始化流程
	HttpServletBean#init(): 初始化
		#完成属性注入
		FrameworkServlet#initServletBean(): 初始化servlet
			#initWebApplicationContext（）： 初始化WebApplicationContext
				WebApplicationContextUtils#getWebApplicationContext(getServletContext()): 从ServletContext域中获取
				# 如果最终在ServletContext中没有发现WebApplicationContext对象，调用creanteWebApplicationContext(): 创建XmlWebApplicationContext
					#configureAndRefreshWebApplicationContext（）： 配置和刷新WebApplicationContext容器
						AbstractApplicationContext#refresh(): 刷新容器
							# 当容器刷新完毕后，发送ContextRefreshedEvent事件
								FrameworkServlet$ContextRefreshListener#onApplicationEvent: 响应ContextRefreshedEvent事件
									#设置refreshEventReceived =  true
									DispatcherServlet#onRefresh(): 刷新初始化策略,
							
				DispatcherServlet#onRefresh(): 刷新初始化策略
					#initStrategies(): 初始化策略容器
						#initMultipartResolver(context)：初始化多部件解析器
						#initLocaleResolver(context): 初始化国际化解析器
						#initThemeResolver(context): // 初始化主题解析器
						#initHandlerMappings(context): // 初始化处理器映射器, 实质是调用InitializingBan接口的afterPropertiesSet（）方法初始化
						#initHandlerAdapters(context)： // 初始化处理器适配器， 同上
						#initHandlerExceptionResolvers(context)： // 初始化异常解析器
						#initRequestToViewNameTranslator(context); 
						#initViewResolvers(context)： // 初始会视图解析器
						#initFlashMapManager(context);
						
						
						
2. RequestMappingHandlerMapping 初始化流程
	RequestMappingHandlerMapping#afterPropertiesSet: 初始化HandlerMapping
		# 创建RequestMappingInfo对象
		AbstractHandlerMethodMapping#afterPropertiesSet: 初始化处理器方法
			#initHandlerMethods(): 初始化处理器方法
				# 获取当前IOC容器所有的对象。
				# 遍历BeanNames， 从IOC容器中获取bean name对应的beanType
					RequestMappingHandlerMapping#isHander（beanType）: 判断是否是Handler， 实质就是判断beanType是否被@Controller或@RequestMapping注解修饰
						# 如果是： detectHandlerMethods： 从Controller或者RequestMapping注解的Bean中，找到所有HandlerMethod
							# 获取handler的handlerType Class 对象
							MethodIntrospector#selectMethods： 返回Method和RequestMappingInfo对象的映射
								MetadataLookup#inspect:
									RequestMappingHandlerMapping#getMappingForMethod（method, handlerType）: 创建RequestMappingInfo对象
								
								# 将Method方法和RequestMappingInfo对象建立映射，存储Map集合中
								
							# 遍历Method方法和RequestMappingInfo 的Map集合
								registerHandlerMethod： 注册handler method 和RequestMappingInfo的映射关系
									AbstractHandlerMethodMapping$MappingRegistry#register: 
										#createHandlerMethod(): 创建HandlerMethod对象
										#this.mappingLookup.put(mapping, handlerMethod)： 存储RequestMappingInfo对象和HandlerMethod对象的映射关系
										# getDirectUrls: 获取maping对应的多个url 在使用时，首先根据url找到REquestMappingInfo，再通过RequestMappingInfo对象找到我们的HandlerMethod
										# 建立url和RequestMappingInfo之间的映射关系， 理解： 由于Restful API 的问题，一个RequestMappingInfo可能对应多个url请求。
	
	总结：
		1. RequestMappingHandlerMapping 初始化最终建立起了连个映射集合
			// 存储RequestMappingInfo对象和HandlerMethod对象的映射关系
			private final Map<T, HandlerMethod> mappingLookup = new LinkedHashMap<>();

			// 存储RequestMappingInfo对象和URL的映射关系
			private final MultiValueMap<String, T> urlLookup = new LinkedMultiValueMap<>();
			
		2. 在使用时，首先根据url找到REquestMappingInfo，再通过RequestMappingInfo对象找到我们的HandlerMethod
			url -> RequestMappingInfo
			RequestMappingInfo -> HandlerMethod
			
			
3. RequstMappingHandlerAdaptor 初始化流程
    DispatcherServlet在初始化HandlerAdaptor时，是通过IOC容器来创建Bean实例，调用RequestMappingHandlerAdaptor的afterPropertiesSet()方法来进行初始化
    RequestMappingHandlerAdaptor#afterPropertiesSet(): 初始化
        #initControllerAdviceCache: 初始化@ControllerAdvice通知缓存
        # 初始化参数解析器
        # 初始化Binder参数解析器
        # 初始化处理器返回值解析器


4. DispatcherServlet请求处理流程
    FrameworkServlet#service(): 处理请求
        #processRequest(): 所有请求method，都调用该方法处理请求
            LocaleContextHolder#getLocaleContext(): 从当前线程的ThreadLocal中获取LocaleContextHolder
            #buildLocaleContext(request): 从当前request中，构建当前的LocaleContext
            RequestContextHolder#getRequestAttributes(): 从当前的ThreadLocal中获取RequestAttributes，实质是ServletRequestAttributes对象，里面封装了request和response对象
            #buildRequestAttributes(request,responce,previousAttributes): 构建ServletRequestAttributes对象。
            #initContextHolders(): 将localeContext和requestAttributes放入到ThreadLocale中。
            DispatcherServlet#doService: 请求实际的处理逻辑
                # 将WebApplicationContext放入到请求域中
                #doDispatch(request, response): 处理请求分发
                    #getHandler(request): 获取HandlerExecutionChain对象
                        AbstractHandlerMapping#getHandler(request): 获取HandlerExecutionChain
                            AbstractHandlerMethodMapping#getHandlerInternal(): 获取HandlerMethod对象，也就是handler
                                #lookupHandlerMethod(): 找到合适的HandlerMethod对象。
                                    AbstractHandlerMethodMappping$MappingRegistry#getMappingsByUrl(): 从urlLookup集合，找到RequestMappingInfo对象
                                    #addMatchingMappings： 将RequestMappingInfo对象和HandlerMethod对象进行匹配，将匹配到的信息封装到Match对象，再将Match对象放入到matches集合中
                            # getHandlerExecutionChain: 根据handler，创建处理器执行器链， 并将Interceptors加入到执行器链中

                    #getHandlerAdaptor(handler): 根据Handler获取对应的HandlerAdaptor， 返回RequestMappingHandlerAdaptor
                    HandlerExecutionChain#applyPreHandle(): 调用所有的Interceptor 拦截器的preHandle方法
                    AbstractHandlerMethodAdaptor#handle(): 处理请求，调用handler method.
                        RequestMappingHandlerAdaptor#handleInternal(request, response): 处理请求，调用handler method
                            #invokeHandlerMethod(): 调用HandlerMethod，也就是执行Handler
                                # 将request和response封装为ServletWebRequest对象，也就是ServletRequestAttributes
                                # getDataBinderFactory(handlerMethod): 创建DataBinderFactory
                                    # 从initBinderCache中获取Handler类中@InitBinder注解的方法
                                    # 创建InitBinderMethod方法，并加入到initBinderMethods集合中，创建DataBinderFactory返回
                                # getModelFactory(): 处理@ModelAttribute注解的方法，并返回ModelFactory
                                # createInvocableHandlerMethod(): 将HandlerMethod封装为ServletInvocableHandlerMethod
                                # 设置参数解析器
                                # 设置返回值解析器
                                # 设置binderFactory
                                # 创建ModelAndViewContainer对象
                                ModelFactory#initModel(): 调用Handler类的@ModelAttribute注解的方法
                                ServletInvocableHandlerMethod#invokeAndHandle(): 参数绑定，验证调用HandlerMethod





                    # applyDefaultViewName(): 设置默认视图名称
                    HandlerExecutionChain#applyPostHandle(): 调用所有interceptor 拦截器的postHandle方法
                    #processDispatchResult(): 处理handler调用返回的ModelAndView对象和结果。


            #resetContextHolders： 请求处理完成后，重置localeContextHolder和requestAttributesHolder
            #publishRequestHandledEvent: 不管请求是否处理成功，发送ServletREquestHandledEvent事件




5. 参数绑定流程

6. @initBinder处理流程

7. @ModelAttributes处理流程

8. @ControllerAdvice处理流程，AOP技术实现全局的异常处理。